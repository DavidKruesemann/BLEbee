#
# BLE XBEE
#
# (c) by Dr. Michael Kroll 2012
#
# http://www.mkroll.mobi
# http://forum.mkroll.mobi
#

# used for the internal data buffer
dim buf1(16)
dim count
dim buffer_pointer

# used for the BD Addr characteristic
dim bdaddr(6)
dim shieldaddr(6)

# used for the Channel characteristics
dim val

event system_boot(major, minor, patch, build, ll_version, protocol, hw)	
	
	# set port 1 to output
	call hardware_io_port_config_direction(1, $f)
	
    # set port 1 pins P1_0 to P1_3 to "0" 
	call hardware_io_port_write(1, $1, $0)
	call hardware_io_port_write(1, $2, $0)
	call hardware_io_port_write(1, $4, $0)
	call hardware_io_port_write(1, $8, $0)

	#read the local devices public Bluetooth address
	call system_address_get()(bdaddr(0:6))
	
	#create the addr buffer (hex)
	shieldaddr(0:1)  = bdaddr(5:1)
	shieldaddr(1:1)  = bdaddr(4:1)
	shieldaddr(2:1)  = bdaddr(3:1)
	shieldaddr(3:1)  = bdaddr(2:1)
	shieldaddr(4:1)  = bdaddr(1:1)
	shieldaddr(5:1)  = bdaddr(0:1)
	
	#write the bd address characteristic
	call attributes_write(xgatt_bdaddr, 0, 6, shieldaddr(0:6))
	
	# set port 1 to output
	call hardware_io_port_config_direction(0, $f)
	# set port 1 pin P0_0 to "0" which is used for the blue Connection LED
	call hardware_io_port_write(0, $1, $0)
	#set to advertising mode
	call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
	#set the buffer pointer to 0 
	buffer_pointer=0
	#set the received counter to 0
	count=0
	#set bondable mode
	call sm_set_bondable_mode(1)	
end

event connection_disconnected(connection ,reason)	
    #connection disconnected, continue advertising
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
	# set port 0 pin P0_0 to "0" 
	call hardware_io_port_write(0, $1, $0)
end

event attributes_value(connection, reason, handle, offset, value_len, value_data)
  # Characteristic TX has been written
  if handle=34 then 
    call system_endpoint_tx(system_endpoint_uart1, value_len, value_data(0:value_len))
  end if
  # Characteristic clear RX buffer has been written
  if handle=31
    buffer_pointer = 0
	count = 0
	call attributes_write(xgatt_rx_buf_count, 0, 1, 0)
  end if
   
  # Characteristic D0 Output has been written
  # gatt_d0 37
  
  if handle=37 then 
	  
	val = value_data(0:1) 
	  
    if val=$00 then
	  call hardware_io_port_write(1,$1,$0)
	end if

	if val=$ff then
	  call hardware_io_port_write(1,$1,$1)
	end if
	  
  end if

  # Characteristic D1 Output has been written
  # gatt_d1 40

  if handle=40 then 

  	val = value_data(0:1) 
  
	if val=$00 then
	  call hardware_io_port_write(1,$2,$0)
	end if

	if val=$ff then
	  call hardware_io_port_write(1,$2,$2)
	end if
	
  end if  
  
  # Characteristic D2 Output has been written
  # gatt_d2 43
  
  if handle=43 then 
	
    val = value_data(0:1)	
	  
	if val=$00 then
	  call hardware_io_port_write(1,$4,$0)
	end if

	if val=$ff then
	  call hardware_io_port_write(1,$4,$4)
	end if
  end if
  
  # Characteristic D3 Output has been written
  # gatt_d3 46  
  
  if handle=46 then 
	val = value_data(0:1)	
	  
	if val=$00 then
	  call hardware_io_port_write(1,$8,$0)
	end if

	if val=$ff then
	  call hardware_io_port_write(1,$8,$8)
	end if
  end if
  
end

event system_endpoint_rx(endpoint, data_len, data_data) 
  if endpoint=system_endpoint_uart1
    memcpy(buf1(buffer_pointer),data_data(0),data_len)
    buffer_pointer = buffer_pointer + data_len
	count = count + data_len
    call attributes_write(xgatt_rx_buf_count, 0, 1, count)
  
    if count=$10
      call attributes_write(xgatt_rx, 0, 16, buf1(0:16))
	  buffer_pointer = 0
	  count = 0
	  call attributes_write(xgatt_rx_buf_count, 0, 1, 0)
    end if
  end if
end

event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
	# set port 0 pin P0_0 to "1" 
	call hardware_io_port_write(0,$1,$1)
end


